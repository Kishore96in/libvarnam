<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: libvarnam | Varnam project]]></title>
  <link href="http://navaneeth.github.com/libvarnam/blog/categories/libvarnam/atom.xml" rel="self"/>
  <link href="http://navaneeth.github.com/libvarnam/"/>
  <updated>2012-08-11T15:58:28+05:30</updated>
  <id>http://navaneeth.github.com/libvarnam/</id>
  <author>
    <name><![CDATA[Navaneeth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Added language detection support to libvarnam]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/11/added-language-detection-support-to-libvarnam/"/>
    <updated>2012-08-11T15:42:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/11/added-language-detection-support-to-libvarnam</id>
    <content type="html"><![CDATA[<p>When using Varnam on web, you could possibly type words from multiple languages in the same editor. When a word is edited, Varnam needs to know the language of the word. <code>varnam_detect_lang()</code> API can be used to achieve this.</p>

<p>See it in action</p>

<p>```bash
$ ./varnamc -s ml --detect-language ಕನ್ನಡ
Kannada</p>

<p>$ ./varnamc -s ml --detect-language தமிழ்
Tamil</p>

<p>$ ./varnamc -s ml --detect-language हिन्दी
Hindi</p>

<p>$ ./varnamc -s ml --detect-language ଓଡ଼ିଆ
Oriya</p>

<p>$ ./varnamc -s ml --detect-language മലയാളം
Malayalam</p>

<p>```
Only few languages are supported currently. Adding support for more languages is easy and this method will work only for languages that follow Devanagari writing system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing varnam_train()]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/09/introducing-varnam-train/"/>
    <updated>2012-08-09T16:33:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/09/introducing-varnam-train</id>
    <content type="html"><![CDATA[<p>Today we introduced a new API to <code>libvarnam</code>.</p>

<p><code>c
int
varnam_train(varnam *handle, const char *pattern, const char *word);
</code></p>

<p>This function trains varnam to resolve <code>word</code> as a match when <code>pattern</code> is given. <code>libvarnam</code> has got a learning sub-system which is good at learning possible patterns from words. But sometimes, it won't get all the possibilities right. Consider the below case.</p>

<p><code>bash
$ ./varnamc -s ml --learn ലണ്ടൻ
Learned ലണ്ടൻ
</code></p>

<p>Now let us try to transliterate <code>london</code>.</p>

<p><code>bash
$ ./varnamc -s ml -t london
Transliterating 'london'
ലൊന്ദൊൻ
</code></p>

<p>This is happening because <code>london</code> won't read as ലണ്ടൻ phonetically. To correct this, you can train varnam like,</p>

<p><code>bash
$ ./varnamc -s ml --train london=ലണ്ടൻ
Success. london will resolve to ലണ്ടൻ
$
$ ./varnamc -s ml -t london
Transliterating 'london'
  ലണ്ടൻ
  ലൊന്ദൊൻ
</code>
Even this will work.</p>

<p><code>bash
$ ./varnamc -s ml -t londonil
Transliterating 'londonil'
  ലണ്ടനിൽ
  ലൊന്ദൊനിൽ
</code></p>

<p>Have a great day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A command line interface to libvarnam]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/08/varnamc-command-line-interface-libvarnam/"/>
    <updated>2012-08-08T16:00:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/08/varnamc-command-line-interface-libvarnam</id>
    <content type="html"><![CDATA[<p>I have created a simple command line interface to <code>libvarnam</code>. It is called as <code>varnamc</code>.</p>

<p>```sh
$ ./varnamc -h
Usage: varnamc [options] language_code args</p>

<pre><code>-l, --library FILE               Sets the varnam library
-v, --verbose                    Enable verbose output
-t, --transliterate TEXT         Transliterate the given text
-r, --reverse-transliterate TEXT Reverse transliterate the given text
-n, --learn [TEXT]               Learn given text. Use --files option together with this to learn from file
-f, --files files                Reads from the specified files
-s, --symbols VALUE              Sets the symbols file
-c, --compile FILE               Compile symbols file
-d, --output-dir dir             Sets the output directory
-h, --help                       Display this screen
</code></pre>

<p>```</p>

<p>This allows to quickly try out various features of <code>libvarnam</code>.</p>

<h2>Usage</h2>

<p>Invoke <code>varnamc</code> with a symbols file and one action. Action could be transliterate, reverse-transliterate, compile or learn.</p>

<p>To transliterate the text <code>malayalam</code>,</p>

<p><code>sh
$ ./varnamc --symbols ml --transliterate malayalam
</code></p>

<p><code>--symbols (-s)</code> specifies which language to use. This can accept either a language code or full path to the symbols file. If language code is specified, <code>varnamc</code> search for appropriate symbols file in some predefined search paths.</p>

<p>To learn a word,</p>

<p><code>sh
$ ./varnamc --symbols ml --learn മലയാളം
</code></p>

<p>To compile a scheme file,</p>

<p><code>sh
$ ./varnamc --symbols ml --compile schemes/ml-unicode
</code></p>

<p>By default, <code>varnamc</code> writes the files into the execution directory. This can be changed by specifying <code>--output-dir</code> switch.</p>

<p>Have a great day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Varnam is in beta]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/05/libvarnam-is-in-beta/"/>
    <updated>2012-08-05T20:37:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/05/libvarnam-is-in-beta</id>
    <content type="html"><![CDATA[<p>First release of <code>libvarnam</code> is ready and it is in public beta. I got a full working implementation of transliteration and reverse transliteration for Malayalam. This version also has built-in learning capabilities. All public APIs are kind of finalized and stable. There are still some rough edges that needs more work. This will be fixed before the first release. Please clone <a href="git://github.com/navaneeth/libvarnam.git">git://github.com/navaneeth/libvarnam.git</a> and let me know your feedback. Installation instructions are available at the <a href="https://github.com/navaneeth/libvarnam#readme">project page</a></p>

<p>Web interface for <code>libvarnam</code> is in progress. We should have something usable by this month end. Documentation would be the other area which needs some love.</p>
]]></content>
  </entry>
  
</feed>
