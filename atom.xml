<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Varnam project]]></title>
  <link href="http://navaneeth.github.com/libvarnam/atom.xml" rel="self"/>
  <link href="http://navaneeth.github.com/libvarnam/"/>
  <updated>2012-08-11T15:58:28+05:30</updated>
  <id>http://navaneeth.github.com/libvarnam/</id>
  <author>
    <name><![CDATA[Navaneeth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Added language detection support to libvarnam]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/11/added-language-detection-support-to-libvarnam/"/>
    <updated>2012-08-11T15:42:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/11/added-language-detection-support-to-libvarnam</id>
    <content type="html"><![CDATA[<p>When using Varnam on web, you could possibly type words from multiple languages in the same editor. When a word is edited, Varnam needs to know the language of the word. <code>varnam_detect_lang()</code> API can be used to achieve this.</p>

<p>See it in action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./varnamc -s ml --detect-language ಕನ್ನಡ
</span><span class='line'>Kannada
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./varnamc -s ml --detect-language தமிழ்
</span><span class='line'>Tamil
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./varnamc -s ml --detect-language हिन्दी
</span><span class='line'>Hindi
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./varnamc -s ml --detect-language ଓଡ଼ିଆ
</span><span class='line'>Oriya
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./varnamc -s ml --detect-language മലയാളം
</span><span class='line'>Malayalam
</span></code></pre></td></tr></table></div></figure>


<p>Only few languages are supported currently. Adding support for more languages is easy and this method will work only for languages that follow Devanagari writing system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing varnam_train()]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/09/introducing-varnam-train/"/>
    <updated>2012-08-09T16:33:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/09/introducing-varnam-train</id>
    <content type="html"><![CDATA[<p>Today we introduced a new API to <code>libvarnam</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="n">varnam_train</span><span class="p">(</span><span class="n">varnam</span> <span class="o">*</span><span class="n">handle</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pattern</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">word</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function trains varnam to resolve <code>word</code> as a match when <code>pattern</code> is given. <code>libvarnam</code> has got a learning sub-system which is good at learning possible patterns from words. But sometimes, it won&#8217;t get all the possibilities right. Consider the below case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./varnamc -s ml --learn ലണ്ടൻ
</span><span class='line'>Learned ലണ്ടൻ
</span></code></pre></td></tr></table></div></figure>


<p>Now let us try to transliterate <code>london</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./varnamc -s ml -t london
</span><span class='line'>Transliterating <span class="s1">&#39;london&#39;</span>
</span><span class='line'>ലൊന്ദൊൻ
</span></code></pre></td></tr></table></div></figure>


<p>This is happening because <code>london</code> won&#8217;t read as ലണ്ടൻ phonetically. To correct this, you can train varnam like,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./varnamc -s ml --train <span class="nv">london</span><span class="o">=</span>ലണ്ടൻ
</span><span class='line'>Success. london will resolve to ലണ്ടൻ
</span><span class='line'><span class="err">$</span>
</span><span class='line'><span class="nv">$ </span>./varnamc -s ml -t london
</span><span class='line'>Transliterating <span class="s1">&#39;london&#39;</span>
</span><span class='line'>  ലണ്ടൻ
</span><span class='line'>  ലൊന്ദൊൻ
</span></code></pre></td></tr></table></div></figure>


<p>Even this will work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./varnamc -s ml -t londonil
</span><span class='line'>Transliterating <span class="s1">&#39;londonil&#39;</span>
</span><span class='line'>  ലണ്ടനിൽ
</span><span class='line'>  ലൊന്ദൊനിൽ
</span></code></pre></td></tr></table></div></figure>


<p>Have a great day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A command line interface to libvarnam]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/08/varnamc-command-line-interface-libvarnam/"/>
    <updated>2012-08-08T16:00:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/08/varnamc-command-line-interface-libvarnam</id>
    <content type="html"><![CDATA[<p>I have created a simple command line interface to <code>libvarnam</code>. It is called as <code>varnamc</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./varnamc -h
</span><span class='line'>Usage: varnamc <span class="o">[</span>options<span class="o">]</span> language_code args
</span><span class='line'>    -l, --library FILE               Sets the varnam library
</span><span class='line'>    -v, --verbose                    Enable verbose output
</span><span class='line'>    -t, --transliterate TEXT         Transliterate the given text
</span><span class='line'>    -r, --reverse-transliterate TEXT Reverse transliterate the given text
</span><span class='line'>    -n, --learn <span class="o">[</span>TEXT<span class="o">]</span>               Learn given text. Use --files option together with this to learn from file
</span><span class='line'>    -f, --files files                Reads from the specified files
</span><span class='line'>    -s, --symbols VALUE              Sets the symbols file
</span><span class='line'>    -c, --compile FILE               Compile symbols file
</span><span class='line'>    -d, --output-dir dir             Sets the output directory
</span><span class='line'>    -h, --help                       Display this screen
</span></code></pre></td></tr></table></div></figure>


<p>This allows to quickly try out various features of <code>libvarnam</code>.</p>

<h2>Usage</h2>

<p>Invoke <code>varnamc</code> with a symbols file and one action. Action could be transliterate, reverse-transliterate, compile or learn.</p>

<p>To transliterate the text <code>malayalam</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./varnamc --symbols ml --transliterate malayalam
</span></code></pre></td></tr></table></div></figure>


<p><code>--symbols (-s)</code> specifies which language to use. This can accept either a language code or full path to the symbols file. If language code is specified, <code>varnamc</code> search for appropriate symbols file in some predefined search paths.</p>

<p>To learn a word,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./varnamc --symbols ml --learn മലയാളം
</span></code></pre></td></tr></table></div></figure>


<p>To compile a scheme file,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./varnamc --symbols ml --compile schemes/ml-unicode
</span></code></pre></td></tr></table></div></figure>


<p>By default, <code>varnamc</code> writes the files into the execution directory. This can be changed by specifying <code>--output-dir</code> switch.</p>

<p>Have a great day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Varnam is in beta]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/08/05/libvarnam-is-in-beta/"/>
    <updated>2012-08-05T20:37:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/08/05/libvarnam-is-in-beta</id>
    <content type="html"><![CDATA[<p>First release of <code>libvarnam</code> is ready and it is in public beta. I got a full working implementation of transliteration and reverse transliteration for Malayalam. This version also has built-in learning capabilities. All public APIs are kind of finalized and stable. There are still some rough edges that needs more work. This will be fixed before the first release. Please clone <a href="git://github.com/navaneeth/libvarnam.git">git://github.com/navaneeth/libvarnam.git</a> and let me know your feedback. Installation instructions are available at the <a href="https://github.com/navaneeth/libvarnam#readme">project page</a></p>

<p>Web interface for <code>libvarnam</code> is in progress. We should have something usable by this month end. Documentation would be the other area which needs some love.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction]]></title>
    <link href="http://navaneeth.github.com/libvarnam/blog/2012/07/12/welcome/"/>
    <updated>2012-07-12T17:05:00+05:30</updated>
    <id>http://navaneeth.github.com/libvarnam/blog/2012/07/12/welcome</id>
    <content type="html"><![CDATA[<p>Hello everybody out there -</p>

<p>Welcome to &#8220;Varnam Project&#8221;. &#8220;Varnam&#8221; is an open source, cross platform transliterator for Indian languages. Varnam is implemented as a learning program which can learn words and patterns. This learnings will be utilized when Varnam does the transliteration which will make the whole typing easy. You can also train Varnam to behave in the way you want.</p>

<h2>History</h2>

<p>Why Varnam?</p>

<p>I use 3 operating systems in my day to day life. Most of the office work will be on Mac OS X. Linux and Windows for my personal projects.</p>

<p>When switching between operating systems, if you are getting the tools that you are used with, you always feels home. I was missing this in terms of an indic input program. Most of the programs are avaiable only for Windows and few for Linux. I haven&#8217;t seen any native program that support transliteration on Mac OS X. I also haven&#8217;t seen any open-source cross platform program that does learning and transliteration.</p>

<p>Varnam is created to address all these issues. It is created with the following design goals.</p>

<ul>
<li>Easy to use  - Varnam APIs are very straightforward and easy to use.</li>
<li>Less dependencies - Varnam uses SQLite as the file format. No other dependecies are required.</li>
<li>Works everywhere - Varnam is written in C adhering to the most portable C89 standard.</li>
<li>Multi language support - We&#8217;d be adding support for almost all the popular programming languages.</li>
</ul>


<h2>Current status</h2>

<p>Varnam is under active development. APIs are evolving constantly. Currently it supports only &#8220;Malayalam&#8221; but we&#8217;d be adding support for most of the popular languages.</p>

<p>If Varnam could do all those stuff that I am envisioning, you&#8217;d be able to</p>

<ul>
<li>Type and train on a web version of Varnam - This would be similar to Google&#8217;s transliterator but much more superior than Google transliterator. More implementation details can be explained in later posts.</li>
<li>Drop &#8220;Varnam&#8221; as a Javascript file to your web application and get indic input with words suggestion in your websites.</li>
<li>Use &#8220;libvarnam&#8221; stand-alone desktop applications in any language of your choice.</li>
<li>Plugins for all popular browsers.</li>
<li>Input system for Android and iOS.</li>
<li>Input system for Linux and Windows.</li>
</ul>


<p>Varnam project is hosted at <a href="https://github.com/navaneeth/libvarnam" title="libvarnam">Github</a>. Project status will be updated in this blog and <a href="http://www.varnamproject.com">http://www.varnamproject.com</a></p>
]]></content>
  </entry>
  
</feed>
